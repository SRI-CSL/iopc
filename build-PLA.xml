<?xml version="1.0" encoding="UTF-8"?>
<!-- ******************** 80 columns **************************************** -->
<!-- This is an ant project file. For more info about ant see: -->
<!-- http://ant.apache.org/ -->

<project default="jars" name="PLA">

    <!-- ******************************************************************** -->
    <!-- global properties:                                                   -->
    <!-- ******************************************************************** -->

    <!-- some directories for ant'ing  -->
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="classes" location="${build}/classes"/>
    <property name="build_lib" location="${build}/lib"/>
    <property name="lib" location="lib"/>
    <property name="doc" location="doc"/>
    <property name="doccheck" location="${doc}/doccheck-pla"/>
    <property name="api-pla" location="${doc}/api-pla"/>

    <!-- some global properties for Java compiler -->
    <property name="DEBUG" value="on"/>
    <property name="DEPRECATION" value="on"/>

    <!-- obtain installation location from environment -->
    <property environment="env"/>
    <property name="install.dir" location="${env.IOPBINDIR}"/>

    <!-- default properties for installing PLA -->
    <property name="pla.dir" value="PLA"/>
    <property name="maude.lib" location="${env.HOME}/Maude/Lib"/>
    <property name="GUI" value="new"/>
    <property name="PLdir" location="${maude.lib}/PL"/>

    <!-- properties for building PLA application bundle -->
    <property name="appname" value="PLA"/>
    <property name="appversion" value="1.0"/> <!-- TODO: store this somewhere central -->
    <property name="version" value="${appversion}"/>
    <property name="exename" value="pla.command"/>

    <property name="app.dir" value="installer/mac/${appname}.app"/>

    <property name="name" value="${appname}-macosx"/>
    <property name="image-name" value="${name}.dmg"/>
    <property name="tarball-name" value="${name}.tar.gz"/>


    <!-- ******************************************************************** -->
    <!-- compilation and building targets:                                    -->
    <!-- ******************************************************************** -->

    <!-- compile Java classes -->
    <target name="compile">
        <mkdir dir="${classes}"/>
        <javac destdir="${classes}"
            source="1.4"
            debug="${DEBUG}"
            deprecation="${DEPRECATION}">
            <src path="${src}/pla"/>
        </javac>
    </target>

    <!-- Build jar file with all classes and resources.  -->
    <target name="jars"
        depends="compile"
        description="Build JAR files for all compiled">

        <mkdir dir="${build_lib}"/>

        <jar compress="false"
            manifestencoding="UTF8"
            jarfile="${build_lib}/pla.jar">

            <fileset dir="${classes}">
                <include name="pla/**"/>
            </fileset>

            <!-- Add other resources -->
            <fileset dir="${src}">
                <patternset>
                    <include name="pla/**/*.gif"/>
                    <include name="pla/**/*.properties"/>
                </patternset>
            </fileset>
        </jar>
    </target>


    <!-- ******************************************************************** -->
    <!-- javadoc and docchecking targets:                                     -->
    <!-- ******************************************************************** -->

    <!-- checking javadoc comments: -->
    <!-- open generated file ${doccheck}/index.html in browser to see errors -->
    <target name="doccheck"
        depends="compile"
        description="Check javadoc for PLA">

        <delete dir="${doccheck}"/>
        <mkdir dir="${doccheck}"/>

        <javadoc destdir="${doccheck}"
            source="1.4"
            sourcepath="${src}" >
            <!-- use special doclet in lib -->
            <doclet name="com.sun.tools.doclets.doccheck.DocCheck"
                path="${lib}/doccheck.jar">
                <param name="-docletID"/>
                <param name="-evident" value="5"/>
            </doclet>
            <packageset dir="${src}">
                <!-- exclude IOP sources -->
                <exclude name="g2d/**"/>
                <exclude name="GUI/**"/>
            </packageset>
        </javadoc>
    </target>

    <target name="api-pla"
        depends="doccheck"
        description="Build javadoc for PathwayLogic Assistant">

        <delete dir="${api-pla}"/>
        <mkdir dir="${api-pla}"/>

        <javadoc destdir="${api-pla}"
            author="true"
            breakiterator="yes"
            source="1.4"
            use="true"
            splitindex="true"
            doctitle="PathwayLogic Assistant API"
            windowtitle="PathwayLogic Assistant API"
            header="PathwayLogic Assistant API">

            <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
            <packageset dir="${src}">
                <include name="pla/**"/>
                <exclude name="GUI/**"/>
                <exclude name="g2d/**"/>
            </packageset>
        </javadoc>
    </target>

    <!-- ******************************************************************** -->
    <!-- installation targets:                                                -->
    <!-- ******************************************************************** -->

    <!-- sets default options for PLA installation -->
    <target name="options.PLA">
        <!-- load.cmd -->
        <condition property="load.cmd"
            value="load-pla">
            <equals arg1="${GUI}" arg2="new" casesensitive="false"/>
        </condition>
        <condition property="load.cmd"
            value="load-ipla">
            <equals arg1="${GUI}" arg2="old" casesensitive="false"/>
        </condition>
        <!-- debug.options -->
        <condition property="debug.options"
            value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888">
            <and>
                <os family="mac"/>
                <equals arg1="${DEBUG}" arg2="on" casesensitive="false"/>
            </and>
        </condition>
        <condition property="debug.options"
            value="">
            <not>
                <and>
                    <os family="mac"/>
                    <equals arg1="${DEBUG}" arg2="on" casesensitive="false"/>
                </and>
            </not>
        </condition>
        <!-- mac.options -->
        <condition property="mac.options"
            value="-Xdock:name=PLA -Dcom.apple.mrj.application.growbox.intrudes=false">
            <os family="mac"/>
        </condition>
        <condition property="mac.options"
            value="">
            <not>
                <os family="mac"/>
            </not>
        </condition>
    </target>

    <!-- check whether some PL files exist before copying them -->
    <target name="check.exist.PL.files"
        depends="options.PLA">
        <condition property="components.maude-is-present">
            <available file="${PLdir}/components.maude" type="file"/>
        </condition>
        <condition property="input.txt-is-present">
            <available file="${PLdir}/input.txt" type="file"/>
        </condition>
        <condition property="predef-dishes.lsp-is-present">
            <available file="${PLdir}/predef-dishes.lsp" type="file"/>
        </condition>
        <condition property="qq.maude-is-present">
            <available file="${PLdir}/qq.maude" type="file"/>
        </condition>
        <condition property="rules.maude-is-present">
            <available file="${PLdir}/rules.maude" type="file"/>
        </condition>
        <condition property="theops.maude-is-present">
            <available file="${PLdir}/theops.maude" type="file"/>
        </condition>
    </target>

    <target name="install"
        depends="jars,check.exist.PL.files"
        description="Install PLA on this machine in ~/Maude/Lib">
        <!-- remove older version of IPLA -->
        <delete dir="${maude.lib}/IPLA"/>
        <!-- copy new version of IPLA -->
        <copy todir="${maude.lib}/IPLA">
            <fileset dir="${pla.dir}/IPLA"/>
        </copy>
        <!-- put pla.jar into IPLA directory -->
        <copy file="${build_lib}/pla.jar" todir="${maude.lib}/IPLA"/>

        <!-- copy new version of PL with replacements in template -->
        <!-- create destination directory if doesn't exist -->
        <mkdir dir="${PLdir}"/>
        <!-- these are 3 files that need to overwrite existing ones -->
        <copy todir="${PLdir}"
            overwrite="true" >
            <filterset>
                <filter token="GUI" value="${load.cmd}"/>
                <filter token="IOPBINDIR" value="${install.dir}"/>
                <filter token="CLASSPATH" value="-cp ${maude.lib}/IPLA/pla.jar"/>
                <filter token="DEBUG" value="${debug.options}"/>
                <filter token="MACOPTIONS" value="${mac.options}"/>
            </filterset>
            <fileset dir="${pla.dir}/PL">
                <include name="load-ipla.maude"/>
                <include name="load-pla.maude"/>
                <include name="startup.txt.template"/>
            </fileset>
        </copy>
        <!-- move template into correct location -->
        <move file="${PLdir}/startup.txt.template"
            tofile="${PLdir}/startup.txt" />
        <!-- copy other files only if they don't exist -->
        <copy todir="${PLdir}"
            overwrite="false">
            <fileset dir="${pla.dir}/PL">
                <include name="components.maude" unless="components.maude-is-present" />
                <include name="input.txt" unless="input.txt-is-present" />
                <include name="predef-dishes.lsp" unless="predef-dishes.lsp-is-present" />
                <include name="qq.maude" unless="qq.maude-is-present" />
                <include name="rules.maude" unless="rules.maude-is-present" />
                <include name="theops.maude" unless="theops.maude-is-present" />
            </fileset>
        </copy>
    </target>

    <target name="run"
        description="Run Pathway Logic Assistant from installation directory">
        <exec dir="${PLdir}"
            executable="iop"
            os="Mac OS X,Linux">
            <env key="PWD" value="${PLdir}"/>
        </exec>
    </target>

    <!-- ******************************************************************** -->
    <!-- deployment targets:                                                  -->
    <!-- ******************************************************************** -->

    <!-- Installing with custom locations? -->

    <!-- =========================================================== -->
    <!--  CREATE-APP                                                 -->
    <!-- =========================================================== -->
    <!--  Creates file tree of dashboard build into a Mac OS X       -->
    <!--  application layout.  Can be run with any Unix-like shell.  -->
    <!-- =========================================================== -->
    <target name="create-app"
        description="Organize PLA into a Mac OS X application layout">

        <echo>
Creating ${app.dir} bundle using
 ${install.dir} as master
(make sure you install IOP first)
================================================================
        </echo>

        <delete dir="${app.dir}"/>

        <mkdir dir="${app.dir}/Contents"/>
        <mkdir dir="${app.dir}/Contents/MacOS"/>
        <mkdir dir="${app.dir}/Contents/Resources/IOP"/>

        <!-- need to do this in shell rather than ant because links needs to be preserved -->
        <echo message="Copying iop bin dir to ${app.dir}/Contents/Resources/IOP"/>
        <exec executable="sh" failonerror="yes">
            <arg value="-c"/>
            <arg value="cp ${install.dir}/* '${app.dir}/Contents/Resources/IOP'"/>
        </exec>

        <!-- Copying the icon into the correct place -->
        <!-- TODO: find some nicer icns -->
        <copy file="iop.icns" todir="${app.dir}/Contents/Resources"/>

        <!-- Generating Info.plist -->
        <copy file="Info.plist" filtering="true" tofile="${app.dir}/Contents/Info.plist">
            <filterset>
                <filter token="APPNAME" value="${appname}"/>
                <filter token="APPVERSION" value="${appversion}"/>
                <filter token="VERSION" value="${version}"/>
                <filter token="EXENAME" value="${exename}"/>
                <filter token="ICONFILENAME" value="iop.icns"/>
            </filterset>
        </copy>

<!--        <echo message="Creating launch script symlink ${app.dir}/Contents/MacOS/${exename}"/>-->
<!--        <exec executable="sh" failonerror="yes">-->
<!--            <arg value="-c"/>-->
<!--            <arg value="ln -s ../Resources/IOP/bin/iop '${app.dir}/Contents/MacOS/${exename}'"/>-->
<!--        </exec>-->
    </target>


    <!-- =========================================================== -->
    <!--  TARBALL                                                    -->
    <!-- =========================================================== -->
    <!--  Make tar ball from Apple application bundle for            -->
    <!--  distribution.  Can be run with any Unix-like shell.  This  -->
    <!--  is an alternative for target "IMAGE" below, which needs    -->
    <!--  to be run on a Mac.                                        -->
    <!-- =========================================================== -->
    <target name="tarball"
        depends="create-app"
        description="Build a gzipped tarball containing PLA.app">

        <echo message="Creating tarball ${tarball-name}"/>
        <exec executable="sh" failonerror="yes">
            <arg value="-c"/>
            <arg value="tar cf - '${app.dir}' | gzip > ${tarball-name}"/>
        </exec>

        <!-- clean up the application bundle -->
<!--        <delete dir="${app.dir}"/>-->
    </target>


    <!-- =========================================================== -->
    <!--  IMAGE                                                      -->
    <!-- =========================================================== -->
    <!--  Make mountable disk image from Apple application bundle    -->
    <!--  for distribution.  Must be run on a Mac.  Use target       -->
    <!--  "TARBALL" above if you don't have a Mac.                   -->
    <!-- =========================================================== -->
    <target name="image"
        depends="create-app"
        description="Build a disk image containing PLA.app">

        <delete file="${image-name}"/>

        <!-- create disk image from application bundle -->
        <exec executable="hdiutil"
            os="Mac OS X"
            failonerror="true">
            <arg line="create
            -srcfolder ${app.dir}
            -volname &quot;${appname} Install&quot;
            ${image-name}"/>
        </exec>

        <!-- clean up the application bundle -->
<!--        <delete dir="${app.dir}"/>-->
    </target>

    <!-- ******************************************************************** -->
    <!-- clean targets:                                                       -->
    <!-- ******************************************************************** -->

    <!-- remove any build products generated by other targets -->
    <target name="clean"
        description="Clean all intermediate products">

        <delete dir="${classes}/pla"/>
        <delete file="${build}/iop.jar"/>
        <delete dir="${doccheck}"/>
        <delete dir="${api-pla}"/>
        <delete dir="${app.dir}"/>
    </target>

</project>
