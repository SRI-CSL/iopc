COMPILER = gcc

# location of temporary build products
BUILDDIR = ../build

ifneq (,$(findstring Darwin,$(shell uname )))
#Mac flags
SCRIPT = mac_iop
CFLAGS =  -Wall -D_MAC
LIBS = -lpthread -lm 
else
#Linux flags
SCRIPT = linux_iop
CFLAGS =  -Wall -pthread -D_LINUX -pedantic
LIBS =  -lm 
endif


EXE = iop_executor\
      iop_registry\
      iop_main\
      iop_filemanager\
      iop_socketfactory\
      iop_listener\
      iop_socket\
      iop_graphics2d_wrapper\
      iop_pvs_wrapper\
      iop_maude_wrapper\
      iop_sal_actor\
      iop_sal_spawner

SCRIPTS = iop jlambda  
HEADERS = cheaders.h constants.h types.h dbugflags.h externs.h options.h sal_lib.h
MISC    = c_makefile 

vpath % ${BUILDDIR}

COBJS = actor.o\
        registry_lib.o\
        iop_lib.o\
        socket_lib.o\
        msg.o argv.o wrapper_lib.o sal_lib.o\
#	ec.o macrostr.o
#Linda: comment out the above line if it still fails


all:  scripts ${EXE}

${EXE}: %: %.c ${COBJS} ${HEADERS} ${MISC}
	${COMPILER} ${CFLAGS}  ${LIBS} ${COBJS} $< -o ${BUILDDIR}/$@

%.o: %.c %.h ${HEADERS} ${MISC}
	${COMPILER} ${CFLAGS} $< -c 

scripts:
	mkdir -p ${BUILDDIR}
	cp ${SCRIPT}  ${BUILDDIR}/iop
	cp jlambda   ${BUILDDIR}/

clean_tmp:
	rm -f /tmp/iop_*

clean:
	rm -f ${EXE} ${COBJS} 

zip: clean
	rm -f *~ *.zip *.bak
	cd ..; mv src.zip src.zip.bak; zip -r src src
